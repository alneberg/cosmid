#!/usr/bin/env python

"""Cosmid CLI

Usage:
  cosmid clone [<resource_id>...] [--wait=<sec>] [--force] [--save] [--dry] [--quiet]
  cosmid update [<resource_id>...]
  cosmid search <query>
  cosmid (-h | --help)
  cosmid --version

Options:
  -h --help        Show this screen.
  --version        Show version.
  -f --force       Overwrite existing files
  -w --wait=<sec>  How long to wait if the download is already started
"""
from __future__ import print_function

from docopt import docopt
from path import path
import sys

import cosmid
from cosmid.magicmethods import cd, load_class
from cosmid.yaml import DefaultReader
from cosmid.messenger import Messenger
from cosmid.core import Registry


def main(args):
  # Always initiate the registry!
  # 1. Config, 2. Project file, 3. History file
  hub = Registry(dry=args["--dry"], quiet=args["--quiet"])

  # -------------------------------------------------------
  #  Configuring Cosmid for this project
  # -------------------------------------------------------
  # Change current working dir (or '.')
  with cd(hub.config.cwd):

    if args["search"]:
      # Search the registry using the query
      options = hub.search(args["<query>"])

      # Just to make sure we print something (feedback)
      print("Search results:\n")

      # Print each of the matches (top 5) to the console as updates
      for option in options:
        hub.messenger.send("note", option[0])

    else:

      # Create a new destination folder if needed
      if not (dest.exists() and args["--dry"]):

        if dest.isfile():
          message = "Save directory is a file: '{}'".format(dest)
          hub.messenger.send(message, "error")
          sys.exit()

        else:
          # Initiate a new directory
          hub.dest.mkdir()

      # -------------------------------------------------------
      #  Decide which resources to download
      #  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      #  N.B. Updating specific resources without version will
      #  replace existing releases with the latest version.
      # -------------------------------------------------------
      # Download resources specified from CLI
      if args["<resource_id>"]:
        resources = {}
        for resource_id in args["<resource_id>"]:
          # I add an extra ``None`` to be able to replace it with "*" for
          # entries without version #-tags that will be only 1-item lists.
          parts = resource_id.split("#") + [None]
          resources[parts[0]] = parts[1] or "latest"

      else:
        if args["update"]:
          # Add 'updateable' resources from the history-file
          resources = hub.history.updateable()
        else:
          # Download all resources listed in "cosmid.yaml"
          resources = hub.project.find()

      # -------------------------------------------------------
      #  Download each of the resources
      # -------------------------------------------------------
      for resource_id, target in resources.iteritems():

        # Either import the resource class or print warning and move on.
        try:
          resource = hub.get(resource_id)
        except ImportError:
          message = "Can't find '{}'".format(resource_id)
          hub.messenger.send("warning", message)
          continue

        # No specified version will match to the latest resource release
        if target == "latest":
          version = resource.latest()
        else:
          version = target

        if hub.goahead(resource, version) or not args["--force"]:

          # Download each file belonging to the resource
          for dl, name in zip(resource.paths(version), resource.names):
            savePath = "{dest}/{name}".format(dest=resource_dest, name=name)

            if args["--dry"]:
              print("Not downloading: {0} to {1}".format(dl, savePath))

            else:
              # Prepare the user for what is going to happen
              fileSize = resource.ftp.fileSize(dl)
              print("Downloading: {path} - {size} MB"
                    .format(path=savePath, size=fileSize))

              # Commit to the download!
              resource.ftp.commit(dl, savePath)

              history.add(resource_id, {
                "version": version,
                "target": target,
                "name": name,
                "source": dl
              })

        if args["--save"] or args["update"]:
          # Add the user supplied data to the project YAML file
          project.add(resource_id, target)

      # Save over the old "cosmid.yaml" file
      project.save()
      history.save()


if __name__ == "__main__":
    args = docopt(__doc__, version="cosmid {v}".format(v=cosmid.__version__))
    main(args)


#   - gzip/concat if nessesary
# cosmid init

# # Bash
# for chrm in "chr1" "chr2" "chr3" "chr4" "chr5" "chr6" "chr7" "chr8" "chr9" "chr10" "chr11" "chr12" "chr13" "chr14" "chr15" "chr16" "chr17" "chr18" "chr19" "chr20" "chr21" "chr22" "chrX" "chrY"
# do
#   gzip -d "$chrm.fa.gz"
# done

# cat chr*.fa > Homo_sapiens.GRCh37.dna.concat.fa
