#!/usr/bin/env python

"""Cosmid CLI

Usage:
  cosmid clone [<resource_id>...] [--wait=<sec>] [--force] [--save] [--dry] [--quiet]
  cosmid update [<resource_id>...]
  cosmid search <query>
  cosmid (-h | --help)
  cosmid --version

Commands:
  clone            Download a new resource(s) locally
  update           Update local resources to the latest version
  search           Search among the available resources

Options:
  -h --help        Show this screen.
  --version        Show version.
  -f --force       Overwrite existing files
  -w --wait=<sec>  How long to wait if the download is already started
"""
from __future__ import print_function

import sys
from docopt import docopt
from path import path

import cosmid
from cosmid.core import Registry


def main(args):
  # Always initiate the registry!
  hub = Registry()

  # -------------------------------------------------------
  #  Configuring Cosmid for this project
  # -------------------------------------------------------
  if args["search"]:
    # Search the registry using the query
    options = hub.search(args["<query>"])

    # Just to make sure we print something (feedback)
    print("Search results:\n")

    # Print each of the matches (top 5) to the console as updates
    for option in options:
      hub.messenger.send("note", option[0])

  else:
    # -------------------------------------------------------
    #  Clone some resources!
    #  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #  N.B. Updating specific resources without version will
    #  replace existing releases with the latest version.
    # -------------------------------------------------------
    # We at least want to warn about not finding the project file
    if not hub.project_path.exists():
      message = "Can't find '{}'.".format(hub.project_path)

      if args["--save"]:
        message_type = "error"
      else:
        message_type = "warning"

      hub.messenger.send(message_type, message)

    # Download resources specified from CLI
    if args["<resource_id>"]:
      resources = {}
      for resource_id in args["<resource_id>"]:
        # I add an extra ``None`` to be able to replace it with "*" for
        # entries without version #-tags that will be only 1-item lists.
        parts = resource_id.split("#") + [None]
        resources[parts[0]] = parts[1] or "latest"

    elif args["update"]:
      # We require the history file
      if not hub.history_path.exists():
        message = "Can't find any cloned any resources."
        hub.messenger.send("error", message)
        sys.exit()

      # Add 'updateable' resources from history-file
      resources = hub.history.updateable()

    else:
      # Download all resources listed in "cosmid.yaml"
      resources = hub.project.find()

    # -------------------------------------------------------
    #  Download each of the resources
    # -------------------------------------------------------
    for resource_id, target in resources.iteritems():

      # Path to actual save location for the resource
      if not hub.dest.exists():
        # Create it!
        hub.dest.mkdir()

      resource, dl_paths, save_paths = hub.grab(resource_id, target)

      if resource is None:
        # Something didn't add up... the user has been notified.
        continue

      else:
        # Path to actual save location for the resource
        folder = path("{dest}/{id}".format(dest=hub.dest, id=resource.id))
        if not folder.exists() and not args["--dry"]:
          # Create it!
          folder.mkdir()

        # Download each file belonging to the resource
        for dl_path, save_path in zip(dl_paths, save_paths):
          if args["--dry"]:
            message = "Cloning: '{0}' to '{1}'".format(dl_path, save_path)
            hub.messenger.send("ghost", message)

          else:
            # Prepare the user for what is going to happen
            fileSize = resource.ftp.fileSize(dl_path)
            message = ("Downloading: {path} - {size} MB"
                       .format(path=save_path, size=fileSize))

            hub.messenger.send("update", message)

            # Commit to the download!
            resource.ftp.commit(dl_path, save_path)

        if args["--save"] or args["update"]:
          # Add the user supplied data to the project YAML file
          hub.project.add(resource_id, target)

    if not args["--dry"]:
      # Save over the old "cosmid.yaml" file
      hub.project.save()
      hub.history.save()

if __name__ == "__main__":
    args = docopt(__doc__, version="cosmid {v}".format(v=cosmid.__version__))
    main(args)


#   - gzip/concat if nessesary
# cosmid init

# # Bash
# for chrm in "chr1" "chr2" "chr3" "chr4" "chr5" "chr6" "chr7" "chr8" "chr9" "chr10" "chr11" "chr12" "chr13" "chr14" "chr15" "chr16" "chr17" "chr18" "chr19" "chr20" "chr21" "chr22" "chrX" "chrY"
# do
#   gzip -d "$chrm.fa.gz"
# done

# cat chr*.fa > Homo_sapiens.GRCh37.dna.concat.fa
