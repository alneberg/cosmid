#!/usr/bin/env python

"""Cosmid CLI

Usage:
  cosmid clone [<resource_id>...] [--wait=<sec>] [--force] [--save] [--dry]
  cosmid update [<resource_id>...]
  cosmid (-h | --help)
  cosmid --version

Options:
  -h --help        Show this screen.
  --version        Show version.
  -f --force       Overwrite existing files
  -w --wait=<sec>  How long to wait if the download is already started
  -u --update      Update resources to the latest versions
"""
from __future__ import print_function

from docopt import docopt
from path import path
import sys

import cosmid
from cosmid.magicmethods import cd, load_class
from cosmid.yaml_reader import YamlReader


def main(args):

  config = YamlReader(".cosmidrc")

  # Change current working dir if requested
  with cd(config.get("cwd", default=".")):

    # Pick up the main cosmid.yaml file
    cosmid = path("cosmid.yaml")

    # Extract the config values if there are any (else set default)
    dest = path(config.get("dest", default="databases"))
    maxWait = int(args.get("--wait") or config.get("maxWait", default=0))

    # Create a new destination folder if needed
    if not dest.exists() and not args["--dry"]:
      if dest.isfile():
        sys.exit("Your save directory '{}' isn't a folder!".format(dest))
      else:
        # Initiate a new directory
        dest.mkdir()

    if not cosmid.exists():
      sys.exit("'cosmid.yaml' not detected; run 'cosmid init'")

    project = YamlReader(cosmid)

    history_file = path("{}/.cosmid.yaml".format(dest))
    if not history_file.exists():
      history_file.touch()

    history = YamlReader(history_file)

    # Either download resources specified from CLI
    if args["<resource_id>"]:
      resource_ids = {}
      for resource_id in args["<resource_id>"]:
        # I add an extra ``None`` to be able to replace it with "*" for
        # entries without version #-tags that will be only 1-item lists.
        parts = resource_id.split("#") + [None]
        resource_ids[parts[0]] = parts[1] or "*"

    else:
      # Or all the resources listed in "cosmid.yaml"
      resource_ids = project.resources

    for resource_id, version in resource_ids.iteritems():
      # Get any currently downloaded resources
      current = history.get(resource_id) or {}

      resource = load_class("cosmid.resources.{}.Resource".format(resource_id))()

      # "Any" will match to the latest resource release
      if version == "*":
        version = resource.latest()

      if current.get("version", None) != version or args["--force"]:
        # So we should download the resource

        # But first make sure the requested version is valid
        valid_versions = resource.versions()
        if version not in valid_versions:
          sys.exit("Invalid version for '{key}'. Choose one of {versions}."
                    .format(key=resource_id,
                            versions=", ".join(valid_versions)))

        for dl in resource.paths(version):

          if args["--dry"]:
            print("Not downloading: {0} to {1}/{2}"
                  .format(dl, dest, resource.name))

          else:
            print("Downloading: {}".format("{0}/{1}"
                  .format(dest, resource.name)))

            fileSize = resource.ftp.fileSize(dl)
            print("Size: {} MB".format(fileSize))
            resource.ftp.commit(dl, "{0}/{1}".format(dest, resource.name))

            history.add(resource_id, {
              "version": version,
              "name": resource.name,
              "source": dl
            })

      if args["--save"] or args["--update"]:
        project.add(resource_id, version)

    # Save over the old "cosmid.yaml" file
    project.save()
    history.save()

    print("All databases downloaded to: '{}'".format(dest))


if __name__ == "__main__":
    args = docopt(__doc__, version="cosmid {v}".format(v=cosmid.__version__))
    main(args)


#   - gzip/concat if nessesary
# cosmid init

# # Bash
# for chrm in "chr1" "chr2" "chr3" "chr4" "chr5" "chr6" "chr7" "chr8" "chr9" "chr10" "chr11" "chr12" "chr13" "chr14" "chr15" "chr16" "chr17" "chr18" "chr19" "chr20" "chr21" "chr22" "chrX" "chrY"
# do
#   gzip -d "$chrm.fa.gz"
# done

# cat chr*.fa > Homo_sapiens.GRCh37.dna.concat.fa
